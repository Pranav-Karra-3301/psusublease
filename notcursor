{
  "name": "PSU Sublease Platform",
  "description": "A modern sublease platform for Penn State University students",
  "rules": [
    {
      "name": "Follow frosted glass design aesthetic",
      "description": "Implement components with backdrop-filter: blur() and subtle transparency",
      "pattern": "Use rgba backgrounds with low opacity (0.05-0.15) combined with backdrop-filter: blur(10px)"
    },
    {
      "name": "Component styling consistency",
      "description": "All UI components should follow the same styling pattern",
      "pattern": "Border radius: 1rem; Box shadow with multiple layers; Transition: all 200ms ease-in-out;"
    },
    {
      "name": "Color palette enforcement",
      "description": "Stick to the defined color palette variables",
      "pattern": "Use CSS variables for colors defined in globals.css: --bg-primary, --glass-bg, --text-primary, --text-secondary, --accent, --border-light"
    },
    {
      "name": "Responsive design requirements",
      "description": "All pages and components must be responsive",
      "pattern": "Use Tailwind's responsive prefixes (sm:, md:, lg:) consistently"
    },
    {
      "name": "Animation consistency",
      "description": "Animations should be subtle and consistent",
      "pattern": "Use consistent timing functions (ease-in-out) and durations (200-300ms)"
    },
    {
      "name": "Code organization",
      "description": "Maintain consistent file structure and component organization",
      "pattern": "Components in /components, pages in /app, hooks in /hooks, utils in /utils, types in /types"
    },
    {
      "name": "Type safety",
      "description": "Ensure proper TypeScript typing across the codebase",
      "pattern": "Define interfaces/types for all props, state, and Supabase data models"
    },
    {
      "name": "Error handling",
      "description": "Implement proper error handling throughout the application",
      "pattern": "Use try/catch blocks with appropriate error messaging and feedback to users"
    },
    {
      "name": "Form validation",
      "description": "Consistent form validation approach",
      "pattern": "Use react-hook-form with zod schemas for all forms"
    },
    {
      "name": "State management",
      "description": "Consistent approach to state management",
      "pattern": "Use React Context for global state, useState for component state, and SWR/React Query for server state"
    },
    {
      "name": "Supabase integration",
      "description": "Follow consistent patterns for Supabase usage",
      "pattern": "Use custom hooks for Supabase operations; implement proper security policies"
    },
    {
      "name": "Accessibility requirements",
      "description": "Ensure all components are accessible",
      "pattern": "Use semantic HTML; ensure keyboard navigation; maintain proper contrast ratios; use aria attributes where appropriate"
    },
    {
      "name": "Performance optimization",
      "description": "Optimize performance throughout the application",
      "pattern": "Use Next.js Image component; implement code splitting; optimize animations; lazy load components when appropriate"
    },
    {
      "name": "Testing requirements", 
      "description": "Implement tests as part of development",
      "pattern": "Write unit tests for utils; component tests with React Testing Library; consider E2E tests with Cypress"
    },
    {
      "name": "Code quality",
      "description": "Maintain high code quality standards",
      "pattern": "Use ESLint with recommended Next.js config; prettier for code formatting"
    },
    {
      "name": "Apartment data utilization",
      "description": "Use the provided apartment data correctly",
      "pattern": "Initial database seeding with the CSV data; implement efficient search and selection UX"
    }
  ],
  "examples": {
    "frosted-glass-component": "const Card = ({ children }) => (\n  <div className=\"bg-opacity-5 bg-white backdrop-blur-md border border-white/10 rounded-2xl shadow-card p-6 transition-all duration-200 hover:scale-[1.02]\">\n    {children}\n  </div>\n);",
    "tailwind-config": "/* tailwind.config.js */\nmodule.exports = {\n  theme: {\n    extend: {\n      colors: {\n        'bg-primary': '#1A1A2E',\n        'bg-secondary': '#16213E',\n        'glass': 'rgba(255, 255, 255, 0.05)',\n        'text-primary': '#F8F8FF',\n        'text-secondary': '#B8B8D0',\n        'accent': '#4D96FF'\n      },\n      boxShadow: {\n        'card': '0 4px 6px rgba(0, 0, 0, 0.1), 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 -1px 0 0 rgba(255, 255, 255, 0.1) inset'\n      },\n      backdropBlur: {\n        'md': '10px'\n      }\n    }\n  }\n}"
  },
  "file-structure": [
    "src/",
    "├─ app/",
    "│  ├─ layout.tsx",
    "│  ├─ page.tsx",
    "│  ├─ listings/[id]/page.tsx",
    "│  ├─ create/page.tsx",
    "│  ├─ profile/page.tsx",
    "│  └─ auth/page.tsx",
    "├─ components/",
    "│  ├─ ui/",
    "│  │  ├─ Button.tsx",
    "│  │  ├─ Card.tsx",
    "│  │  ├─ Input.tsx",
    "│  │  └─ Select.tsx",
    "│  ├─ layout/",
    "│  │  ├─ Header.tsx",
    "│  │  └─ Footer.tsx",
    "│  └─ listings/",
    "│     ├─ ListingCard.tsx",
    "│     ├─ ListingGrid.tsx",
    "│     ├─ ListingDetail.tsx",
    "│     └─ CreateListingForm.tsx",
    "├─ hooks/",
    "│  ├─ useSupabase.ts",
    "│  ├─ useAuth.ts",
    "│  └─ useListings.ts",
    "├─ types/",
    "│  ├─ Apartment.ts",
    "│  ├─ Listing.ts",
    "│  └─ User.ts",
    "├─ utils/",
    "│  ├─ supabase.ts",
    "│  ├─ formatters.ts",
    "│  └─ validators.ts",
    "└─ data/",
    "   └─ apartments.ts"
  ],
  "database-schema": {
    "apartments": {
      "id": "uuid PRIMARY KEY",
      "name": "text NOT NULL",
      "address": "text NOT NULL",
      "website": "text",
      "phone": "text",
      "email": "text",
      "created_at": "timestamptz DEFAULT now()"
    },
    "listings": {
      "id": "uuid PRIMARY KEY",
      "user_id": "uuid REFERENCES auth.users NOT NULL",
      "apartment_id": "uuid REFERENCES apartments",
      "custom_apartment": "text",
      "floor_plan": "text NOT NULL",
      "bedrooms": "integer NOT NULL",
      "bathrooms": "integer NOT NULL",
      "current_rent": "decimal NOT NULL",
      "offer_price": "decimal NOT NULL",
      "negotiable": "boolean DEFAULT false",
      "start_date": "date NOT NULL",
      "end_date": "date NOT NULL",
      "description": "text",
      "amenities": "text[]",
      "fees": "jsonb",
      "has_roommates": "boolean DEFAULT false",
      "roommates_staying": "boolean DEFAULT false",
      "gender_preference": "text",
      "images": "text[]",
      "created_at": "timestamptz DEFAULT now()",
      "updated_at": "timestamptz DEFAULT now()"
    },
    "profiles": {
      "id": "uuid REFERENCES auth.users PRIMARY KEY",
      "first_name": "text",
      "last_name": "text",
      "phone": "text",
      "email": "text",
      "preferred_contact": "text",
      "created_at": "timestamptz DEFAULT now()",
      "updated_at": "timestamptz DEFAULT now()"
    }
  }
}